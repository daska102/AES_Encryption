import random

#Main method that runs the entire encryption and decryption
#Call main and it will prompt for a phrase to encrypt
def main():
    k = generateKey(16)
    key = KeyExpansion(k, 4, 4, 10)
    
    e = input("Please enter the phrase you want to encrypt: ")
    print("\n")
    
    while(len(e)%16 != 0):
        e += " "
    arr = []
    encArr = []
    strArr = []
    final = ""

    for i in range(len(e)//16):
        arr.append(e[i*16:i*16+16])

    
    for j in range(len(arr)):
        encArr.append(Cipher(Phrase(arr[j]), key, 4, 10))

    print("Here is your encrypted message in bytes: ")
    for n in range(len(encArr)):
        print(encArr[n])
    print("\n")

    print("Here is your encrypted message in characters: ")
    for n in range(len(encArr)):
        print(InvPhrase(encArr[n]))
    print("\n")
        
    for l in range(len(encArr)):
        strArr.append(InvCipher(encArr[l], key, 4, 10))

    for m in range(len(strArr)):
        final += InvPhrase(strArr[m])
    print ("Here is your decoded message: " + final)

#Turns a phrase into a hex number
def Phrase(p):
    arr = []
    out = 0
    for j in p:
        arr.append(ord(j))
    for i in range(len(arr)):
        out |= arr[i] << 8*i
    return out

#Turns a hex number and turns into a phrase
def InvPhrase(p):
    out = ""
    arr = []
    string = str(hex(p))
    for i in range(len(string)//2):
        arr.append(string[2*i:2*i+2])
    arr = arr[::-1]
    for j in range(len(arr)):
        arr[j] = "0x" + arr[j]
    for a in range(len(arr)-1):
        out += chr(int(arr[a], 16))
    return out

        
#Encrypts a stream of bytes and returns the packed state of encryption
def Cipher(inBytes, w, Nb, Nr):
    state = create_state(inBytes, 4) #Puts into 4X4 state
    AddRoundKey(state, w[:Nb], Nb) 
    i = 1
    while i < Nr:
        SubBytes(state, Nb, sbox)
        state = ShiftRows(state, Nb, 1)
        MixColumns(state, Nb)
        AddRoundKey(state, w[i*Nb:i*Nb+4], Nb)
        i += 1
        
    SubBytes(state, Nb, sbox)
    state = ShiftRows(state, Nb, 1)
    AddRoundKey(state, w[Nr*Nb:Nr*Nb+4], Nb)
    
    return (pack_state(state, 4)) #Puts back into stream of bytes


#Decrypts a stream of bytes and returns packed state decryption
def InvCipher(inBytes, w, Nb, Nr):
    state = create_state(inBytes, Nb) #Puts into a 4x4 state
    AddRoundKey(state, w[Nr*Nb:Nr*Nb+4], Nb)
    state = ShiftRows(state, Nb, -1)
    SubBytes(state, Nb, rsbox)
    
    i = Nr - 1
    while i > 0:
        AddRoundKey(state, w[i*Nb:i*Nb+4], Nb)
        InvMixColumns(state, 4)
        state = ShiftRows(state, Nb, -1)
        SubBytes(state, Nb, rsbox) 
        i -= 1
        
    AddRoundKey(state, w[:Nb], Nb)
    
    return (pack_state(state, 4)) # Puts back into stream of bytes


#Can generate a random first key to be entered into key expansion
#Note: For key expansion, n should be 16
def generateKey(n):
    word = []
    for i in range(n):
        word.append(random.randint(0, 255))
    return word


#Expands a 16 element key into the desired length for encryption
def KeyExpansion(key, Nb, Nk, Nr):
    i = 0
    w = list()
    while (i < Nk):
        w.append(ElementsToWord(key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]))
        i += 1

    i = Nk
    while (i < Nb * (Nr+1)):
        temp = w[i-1]
    
        if (i % Nk == 0):
            temp = SubWord(RotWord(temp)) ^ Rcon[i % 256]

        elif (Nk > 6) and (i % Nk == 4):
            temp = SubWord(temp)
            
        w.append(w[i-Nk] ^ temp)
        i += 1
        
    for i in range(Nb*(Nr+1)):
        w[i] = w[i] % 256

    return w



#Sub Method of KeyExpansion
#Takes 4 bytes and combines them to a single 4 byte "word"
def ElementsToWord(a, b, c, d):
    return ((d << 24) | (c << 16) | (b << 8) | a)



#Sub Method of RotWord and SubWord
#Takes a byte array of length 4 and combines elements to a single 4 byte "word"
def Arr4ToWord(a):
    return((a[3] << 24) | (a[2] << 16) | (a[1] << 8) | a[0])



#Sub Mehthod of InvWord
#Takes a bit array of length 8 and combines elements to a single byte "word"
def Arr8ToWord(a):
    return((a[7] << 7) | (a[6] << 6) | (a[5] << 5) | (a[4] << 4) |(a[3] << 3) | (a[2] << 2) | (a[1] << 1) | a[0])



#Sub Mehthod of KeyExpansion
#Rotates a 4 byte word so the first byte is at the end
def RotWord(word):
    w = InvWord(word)
    w = w[1:] + w[:1]
    return Arr4ToWord(w)


#Sub Method of Key Expansion
#Replaces word bytes with bytes of sbox
def SubWord(word):
    w = InvWord(word)
    for i in range(len(w)):
        w[i] = sbox[w[i]]
    return Arr4ToWord(w)


#Sub Method of RotWord and SubWord
#Takes a 4 byte word and turns it into a 4 element byte array
def InvWord(word):
    w = list()
    for j in range(4):
        f = list()
        for i in range(8):
            f.append(word%2)
            word >>= 1
        w.append(Arr8ToWord(f))
    return w



#XORs a 4 byte array with a 4x4 state array
def AddRoundKey(arr, key, nb):
    for i in range(nb):
        for j in range(nb):
            arr[i][j] = arr[i][j]^key[j]
    return arr


#Mix Columns and multiplies and Galois Field
def MixColumns(arr, nb):   
    for i in range(nb):
        x = MultiplyVector(MakeColumn(arr, i), nb)
        for j in range (nb):
            arr[j][i] = x[j]

    return arr

#Inverse of MixColumns
def InvMixColumns(arr, nb):   
    for i in range(3):
        MixColumns(arr, nb)
    return arr

#Sub method for MixColumns
#Creates a column from a 2D Array
def MakeColumn(arr, idx):
    x = list()
    for i in range(4):
        x.append(arr[i][idx])
    return x

#Sub method of MixColumns
#Performs Vector Multiplication in Galois Field
def MultiplyVector(vector, nb):
    a = [[2, 3, 1, 1],[1, 2 , 3, 1],[1, 1, 2, 3],[3, 1, 1, 2]]
    newColumn = list()
    for i in range(4):
        n = 0
        for j in range(4):
            n ^= MultGF256(vector[j],a[i][j])
        newColumn.append(n)
    return newColumn

#Sub Method of MixColumns
#Performs Galois Multiplication
def MultGF256(p, q):

    m = 0x11b
    r = 0
    while q:
        
        if q&1: #If the last bit in q is a 1
            r ^= p #Exclusive or r with p
        p <<= 1 #Shift p over to simulate multiplying by x
        
        if p&0x100: #If p gets to big (front bit is a one)
            p ^= m #"Subtact" m, our irreducible polynomial

        q >>= 1 #Discard q's lowest bit

    return r


#Shifts Rows of the state
#dir = 1 shifts forward, dir = -1 shifts back
def ShiftRows(state, nb, dir):
    if (dir == 1):
        return ShiftRowsForward(state)
    else:
        return ShiftRowsBackward(state)

#Sub Method of ShiftRows
#Shifts and individual row of a state by that offset
def ShiftRow(arr, offset):
    n = (len(arr) - offset) % len(arr)
    return arr[n:] + arr[:n]


#Sub Method of ShiftRows
#Shifts Rows of a state forward
def ShiftRowsForward(arr):
    i = 0
    x = list()
    while i < len(arr):
        x.append(ShiftRow(arr[i], i))
        i += 1
    return x

#Sub Method of ShiftRows
#Shifts Rows of a state backward (inverse)
def ShiftRowsBackward(arr):
    i = 0
    x = list()
    while i < len(arr):
        x.append(ShiftRow(arr[i], -i))
        i += 1
    return x


#Takes a state and replaces it's value with sbox or rsbox
def SubBytes(state, nb, table):
    #Use in place substitution using the given table
    #Used for both sub_btes ans sub_bytes_inv

    for c in range(nb):
        for r in range(nb):
            state[r][c] = table[state[r][c] % 256]

    return state

#Turns biString into a bitStream
def bitstring_to_kbit_stream(n, num_words, k=8):
    """
    Convery a string of bits (an int) into a stream of kbit blocks
    """
    mask = (1<<k)-1
    for i in range(num_words):
        yield n&mask
        n >>= k

#Creates a 4x4 state from a string of bytes
def create_state(inp, num_blocks):
    """
    Convert a single int of num_blocks*4 bits into a Rijdael state
    """
    return [list(bitstring_to_kbit_stream(b,4,8))
        for b in bitstring_to_kbit_stream(inp,num_blocks,32)]


#Creates a string of bytes from a 4x4 array
def pack_state(state,num_blocks):
    result = 0
    for r in range(num_blocks):
        for c in range(4):
            result <<= 8
            result |= state[-(r+1)][-(c+1)]
    return result


#Used for debugging
def state_to_str(state, num_blocks):
    """
    Convert a Rijndael state into a human readable
    string for debugging
    """
    s = ""
    for r in range(4):
        for c in range(num_blocks):
            s += "%02x "%state[r][c]
        s += "\n"
    #This may be not be needed 
    #For c in range(num_blocks):
    # s += "%02x "%state[r][c]
    return s


# Rijndael S-box
sbox =  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
            0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
            0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
            0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
            0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
            0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
            0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
            0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
            0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
            0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
            0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
            0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
            0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
            0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
            0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
            0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
            0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
            0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
            0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
            0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
            0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
            0x54, 0xbb, 0x16]


# Rijndael Inverted S-box
rsbox = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
            0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
            0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
            0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
            0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
            0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
            0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
            0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
            0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
            0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
            0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
            0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
            0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
            0x73 , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
            0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
            0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
            0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
            0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
            0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
            0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
            0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
            0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
            0x21, 0x0c, 0x7d]


# Rijndael Rcon
Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
            0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
            0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
            0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
            0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
            0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
            0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
            0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
            0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
            0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
            0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
            0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
            0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
            0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
            0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
            0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
            0xe8, 0xcb]
